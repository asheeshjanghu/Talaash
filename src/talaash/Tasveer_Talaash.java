/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * results = 332 432 621  736 841
 * Tasveer_Talaash.java
 * 332  732  637 844 736 316 841 743
 * Created on Feb 5, 2014, 4:27:18 PM
 */
package talaash;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import talaash.ExtraGui.ListViewer;
import talaash.ExtraGui.ListViewer;
import talaash.ExtraGui.histgui;
import talaash.ExtraGui.shapegui;
import talaash.Indexer.HistogramIndexer;
import talaash.Indexer.parallelHistogramIndexer;
import talaash.preprocessing.GaborFilterTest;
import talaash.preprocessing.PreProcess;
import talaash.preprocessing.Supervised;
import talaash.preprocessing.cannyedgedetector;
import talaash.preprocessing.kmeans;
import talaash.preprocessing.parallelwaveletprocessing;
import talaash.preprocessing.waveletprocessing;

/**
 *
 * @author asheesh
 */
public class Tasveer_Talaash extends javax.swing.JFrame {

    public Tasveer_Talaash() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        TabbedPane = new javax.swing.JTabbedPane();
        SearchPanel = new javax.swing.JPanel();
        QuerypathTextLabel = new javax.swing.JTextField();
        BrowseQuerybutton = new javax.swing.JButton();
        WaveletsRadioButton = new javax.swing.JRadioButton();
        ColorRadioButton = new javax.swing.JRadioButton();
        SearchUsingLabel = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        queryimagelabel = new javax.swing.JLabel();
        ParallelButton = new javax.swing.JButton();
        Combined_Button = new javax.swing.JButton();
        PreprocessPanel1 = new javax.swing.JPanel();
        DatabasePathTextLabel = new javax.swing.JTextField();
        BrowseDatabaseButton = new javax.swing.JButton();
        IndexingButton = new javax.swing.JButton();
        ProgressBar1 = new javax.swing.JProgressBar();
        UsingShapeRadioButton = new javax.swing.JRadioButton();
        UsingColorRadioButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AboutTextArea = new javax.swing.JTextArea();
        HistogramPane = new javax.swing.JPanel();
        HistogramquerypathTextLabel = new javax.swing.JTextField();
        BrowseHistogramQuerybutton = new javax.swing.JButton();
        SeeHistogram = new javax.swing.JButton();
        HistogramLabel = new javax.swing.JLabel();
        ShapePane = new javax.swing.JPanel();
        ShapequerypathTextLabel = new javax.swing.JTextField();
        BrowseShapeQuerybutton = new javax.swing.JButton();
        ShowShape = new javax.swing.JButton();
        HistogramLabel1 = new javax.swing.JLabel();
        EdgesButton = new javax.swing.JButton();
        ShapePane1 = new javax.swing.JPanel();
        ClusteringpathTextLabel = new javax.swing.JTextField();
        BrowseClusterbutton = new javax.swing.JButton();
        SupervisedButton = new javax.swing.JButton();
        UnsupervisedButton = new javax.swing.JButton();
        Clusternumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);

        QuerypathTextLabel.setText("Enter the path of Query image");
        QuerypathTextLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuerypathTextLabelActionPerformed(evt);
            }
        });

        BrowseQuerybutton.setText("Browse");
        BrowseQuerybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseQuerybuttonActionPerformed(evt);
            }
        });

        WaveletsRadioButton.setText("Wavelets");
        WaveletsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WaveletsRadioButtonActionPerformed(evt);
            }
        });

        ColorRadioButton.setText("Color");

        SearchUsingLabel.setText("Search Using");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ParallelButton.setText("Parallel Search");
        ParallelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParallelButtonActionPerformed(evt);
            }
        });

        Combined_Button.setText("Combined");
        Combined_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combined_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SearchPanelLayout = new javax.swing.GroupLayout(SearchPanel);
        SearchPanel.setLayout(SearchPanelLayout);
        SearchPanelLayout.setHorizontalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchPanelLayout.createSequentialGroup()
                        .addComponent(SearchUsingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SearchPanelLayout.createSequentialGroup()
                            .addComponent(QuerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(BrowseQuerybutton)
                            .addGap(69, 69, 69))
                        .addGroup(SearchPanelLayout.createSequentialGroup()
                            .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(SearchPanelLayout.createSequentialGroup()
                                    .addComponent(WaveletsRadioButton)
                                    .addGap(18, 18, 18)
                                    .addComponent(ColorRadioButton))
                                .addGroup(SearchPanelLayout.createSequentialGroup()
                                    .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(Combined_Button)
                                        .addComponent(SearchButton))
                                    .addGap(51, 51, 51)
                                    .addComponent(ParallelButton)))
                            .addGap(81, 81, 81)
                            .addComponent(queryimagelabel, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addContainerGap()))))
        );
        SearchPanelLayout.setVerticalGroup(
            SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPanelLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BrowseQuerybutton)
                    .addComponent(QuerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, SearchPanelLayout.createSequentialGroup()
                        .addComponent(SearchUsingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WaveletsRadioButton)
                            .addComponent(ColorRadioButton))
                        .addGap(18, 18, 18)
                        .addGroup(SearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchButton)
                            .addComponent(ParallelButton))
                        .addGap(33, 33, 33)
                        .addComponent(Combined_Button))
                    .addComponent(queryimagelabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Search", SearchPanel);

        DatabasePathTextLabel.setText("Enter the path of the database here or manually browseto it.");
        DatabasePathTextLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatabasePathTextLabelActionPerformed(evt);
            }
        });

        BrowseDatabaseButton.setText("Browse");
        BrowseDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseDatabaseButtonActionPerformed(evt);
            }
        });

        IndexingButton.setText("Start your indexing");
        IndexingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndexingButtonActionPerformed(evt);
            }
        });

        UsingShapeRadioButton.setText("Using Shape");

        UsingColorRadioButton.setText("Using Color");

        javax.swing.GroupLayout PreprocessPanel1Layout = new javax.swing.GroupLayout(PreprocessPanel1);
        PreprocessPanel1.setLayout(PreprocessPanel1Layout);
        PreprocessPanel1Layout.setHorizontalGroup(
            PreprocessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                .addGroup(PreprocessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(ProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DatabasePathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(BrowseDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(UsingShapeRadioButton)
                        .addGap(91, 91, 91)
                        .addComponent(UsingColorRadioButton))
                    .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(IndexingButton)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        PreprocessPanel1Layout.setVerticalGroup(
            PreprocessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PreprocessPanel1Layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addGroup(PreprocessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatabasePathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addGroup(PreprocessPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsingShapeRadioButton)
                    .addComponent(UsingColorRadioButton))
                .addGap(43, 43, 43)
                .addComponent(IndexingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(ProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TabbedPane.addTab("Pre Process", PreprocessPanel1);

        AboutTextArea.setColumns(20);
        AboutTextArea.setRows(5);
        AboutTextArea.setText("This project is done in pursuit of fulfillment of dissertation for\nM.tech Thesis under the able guidance of Prof. A.K.Tripathi.\nThis tool helps in searching for similar images from a database.\n\nSteps:\n\n1. Select a database of images for indexing(from where you want to \nsearch similar images) by browsing the Pre Process tab and selecting \nthe appropriate folder or by giving the path of the database in the\ntext field.\n2. Click on preprocess.\n3. Go to search tab and provide the query image(the image whose likes \nyou want to search in DB).\n4. Click on search button to get similar images.");
        jScrollPane1.setViewportView(AboutTextArea);

        TabbedPane.addTab("About", jScrollPane1);

        HistogramquerypathTextLabel.setText("Enter the path of  image whose histogram you want to see");
        HistogramquerypathTextLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistogramquerypathTextLabelActionPerformed(evt);
            }
        });

        BrowseHistogramQuerybutton.setText("Browse");
        BrowseHistogramQuerybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseHistogramQuerybuttonActionPerformed(evt);
            }
        });

        SeeHistogram.setText("See Histogram");
        SeeHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeHistogramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HistogramPaneLayout = new javax.swing.GroupLayout(HistogramPane);
        HistogramPane.setLayout(HistogramPaneLayout);
        HistogramPaneLayout.setHorizontalGroup(
            HistogramPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistogramPaneLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(HistogramPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistogramPaneLayout.createSequentialGroup()
                        .addComponent(SeeHistogram)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(HistogramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(HistogramPaneLayout.createSequentialGroup()
                        .addComponent(HistogramquerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(BrowseHistogramQuerybutton)
                        .addGap(69, 69, 69))))
        );
        HistogramPaneLayout.setVerticalGroup(
            HistogramPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HistogramPaneLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(HistogramPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BrowseHistogramQuerybutton)
                    .addComponent(HistogramquerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(HistogramPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HistogramPaneLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(SeeHistogram))
                    .addGroup(HistogramPaneLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(HistogramLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(261, 261, 261))
        );

        TabbedPane.addTab("Histogram", HistogramPane);

        ShapequerypathTextLabel.setText("Enter the path of  image whose shape you want to see");
        ShapequerypathTextLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShapequerypathTextLabelActionPerformed(evt);
            }
        });

        BrowseShapeQuerybutton.setText("Browse");
        BrowseShapeQuerybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseShapeQuerybuttonActionPerformed(evt);
            }
        });

        ShowShape.setText("Show Shape");
        ShowShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowShapeActionPerformed(evt);
            }
        });

        EdgesButton.setText("Edges");
        EdgesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShapePaneLayout = new javax.swing.GroupLayout(ShapePane);
        ShapePane.setLayout(ShapePaneLayout);
        ShapePaneLayout.setHorizontalGroup(
            ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShapePaneLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShapePaneLayout.createSequentialGroup()
                        .addGroup(ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShowShape)
                            .addComponent(EdgesButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(HistogramLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))
                    .addGroup(ShapePaneLayout.createSequentialGroup()
                        .addComponent(ShapequerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(BrowseShapeQuerybutton)
                        .addGap(57, 57, 57))))
        );
        ShapePaneLayout.setVerticalGroup(
            ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShapePaneLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ShapequerypathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseShapeQuerybutton))
                .addGroup(ShapePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShapePaneLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(ShowShape)
                        .addGap(36, 36, 36)
                        .addComponent(EdgesButton))
                    .addGroup(ShapePaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(HistogramLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(263, 263, 263))
        );

        TabbedPane.addTab("Shape", ShapePane);

        ClusteringpathTextLabel.setText("Enter the path of  folder whose images you want to be clustered");
        ClusteringpathTextLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClusteringpathTextLabelActionPerformed(evt);
            }
        });

        BrowseClusterbutton.setText("Browse");
        BrowseClusterbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseClusterbuttonActionPerformed(evt);
            }
        });

        SupervisedButton.setText("Supervised learning");
        SupervisedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupervisedButtonActionPerformed(evt);
            }
        });

        UnsupervisedButton.setText("Unsupervised Learning");
        UnsupervisedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnsupervisedButtonActionPerformed(evt);
            }
        });

        Clusternumber.setText("cluster number?");
        Clusternumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClusternumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ShapePane1Layout = new javax.swing.GroupLayout(ShapePane1);
        ShapePane1.setLayout(ShapePane1Layout);
        ShapePane1Layout.setHorizontalGroup(
            ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShapePane1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShapePane1Layout.createSequentialGroup()
                        .addGroup(ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SupervisedButton)
                            .addComponent(ClusteringpathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(BrowseClusterbutton)
                        .addGap(57, 57, 57))
                    .addGroup(ShapePane1Layout.createSequentialGroup()
                        .addComponent(UnsupervisedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                        .addComponent(Clusternumber, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(135, 135, 135))))
        );
        ShapePane1Layout.setVerticalGroup(
            ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShapePane1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ClusteringpathTextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseClusterbutton))
                .addGroup(ShapePane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShapePane1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(SupervisedButton)
                        .addGap(36, 36, 36)
                        .addComponent(UnsupervisedButton))
                    .addGroup(ShapePane1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(Clusternumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(298, 298, 298))
        );

        TabbedPane.addTab("Clustering", ShapePane1);

        jLabel1.setBackground(new java.awt.Color(102, 102, 255));
        jLabel1.setFont(new java.awt.Font("Gautami", 3, 24));
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("Tasveer Talaashkarta");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18));
        jLabel2.setText("Guide : Prof. A.K.Tripathi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(371, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(224, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String Clusteringpath;
    public String indexingpath;
    public String SeeHistogrampath; 
    public String ShowShapepath; 
    public String queryimagepath;
    public int [] orderreturned;
    public int [] waveletorderreturned;
    public static int top=10;
    public int clusterno;
private void BrowseDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseDatabaseButtonActionPerformed
// TODO add your handling code here:
    // We need a file chooser to handle folder chosen path
    
    JFileChooser BrowseDataBaseButtonpath=new JFileChooser();
    BrowseDataBaseButtonpath.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    BrowseDataBaseButtonpath.setDialogTitle("Select Directory for Pre Processing");
    BrowseDataBaseButtonpath.showDialog(this, "Open it");
    File DBfolder=BrowseDataBaseButtonpath.getSelectedFile();
    System.out.print(DBfolder.getAbsolutePath());
    if(DBfolder.isDirectory())
    {
        String DBfolderpath=DBfolder.getAbsolutePath();
        DatabasePathTextLabel.setText(DBfolderpath);   
        indexingpath=DBfolderpath;
          System.out.println("indexingpath value inside browse database button  ="+indexingpath);
    }
    else
        JOptionPane.showMessageDialog(null, "Select directory only", "An Oops moment in browsedb button", WIDTH);
}//GEN-LAST:event_BrowseDatabaseButtonActionPerformed

private void QuerypathTextLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuerypathTextLabelActionPerformed
// TODO add your handling code here:
    
}//GEN-LAST:event_QuerypathTextLabelActionPerformed

private void IndexingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndexingButtonActionPerformed
// TODO add your handling code here:
    try {
      if( (UsingColorRadioButton.isSelected()==true) && (UsingShapeRadioButton.isSelected()==true))
      {
           PreProcess ppobj=new PreProcess(indexingpath);      
           ppobj.starthistogramcal();    
           ppobj.setpath(indexingpath);
   
           waveletprocessing wpobj=new waveletprocessing();
           wpobj.setpath(indexingpath);
           wpobj.wavelet(indexingpath);
           
          
      }
      
      else if(UsingColorRadioButton.isSelected()==true && (UsingShapeRadioButton.isSelected()==false)  )  
      {
          PreProcess ppobj=new PreProcess(indexingpath);      
          ppobj.starthistogramcal();    
          ppobj.setpath(indexingpath);
      }
      
      else if( (UsingShapeRadioButton.isSelected()==true)&& (UsingColorRadioButton.isSelected()==false)  )  
      {
           waveletprocessing wpobj=new waveletprocessing();
           wpobj.setpath(indexingpath);
           wpobj.wavelet(indexingpath);           
           
      }
      
      else 
      {
          JOptionPane.showMessageDialog(null, "Select any option or both", "An Oops moment in indexing button", WIDTH);
      }
    }
    catch(ClassNotFoundException cnf)
    {
        System.out.println(cnf);
    }
    catch(FileNotFoundException fnf)
    {
        System.out.append("file is not found in indexing button pressing"+fnf);
    }
    catch(IOException ioe)
    {
        System.out.append("IOException ho gaya indexing button pressing"+ioe);
    }
}//GEN-LAST:event_IndexingButtonActionPerformed

private void HistogramquerypathTextLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistogramquerypathTextLabelActionPerformed
// TODO add your handling code here:
     
}//GEN-LAST:event_HistogramquerypathTextLabelActionPerformed

private void DatabasePathTextLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatabasePathTextLabelActionPerformed
// TODO add your handling code here:
   
}//GEN-LAST:event_DatabasePathTextLabelActionPerformed

private void BrowseHistogramQuerybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseHistogramQuerybuttonActionPerformed
// TODO add your handling code here:
    JFileChooser BrowseHistogramQueryButtonpath=new JFileChooser();
    BrowseHistogramQueryButtonpath.setFileSelectionMode(JFileChooser.FILES_ONLY);
    BrowseHistogramQueryButtonpath.setDialogTitle("Select an image for viewing its histogram ");
    BrowseHistogramQueryButtonpath.showDialog(this, "Open it");
    File histogramfile=BrowseHistogramQueryButtonpath.getSelectedFile();
    System.out.println("histogram viewing file path == "+histogramfile.getAbsolutePath());
    if(histogramfile.isFile())
    {
        String histogramfilepath=histogramfile.getAbsolutePath();
        HistogramquerypathTextLabel.setText(histogramfilepath);   
        SeeHistogrampath=histogramfilepath;
        System.out.println("histogram viewing file path  SeeHistogrampath== "+ SeeHistogrampath);
    }
    else
        JOptionPane.showMessageDialog(null, "Select file only", "An Oops moment inside view histogram button", WIDTH);
    
}//GEN-LAST:event_BrowseHistogramQuerybuttonActionPerformed

private void SeeHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeHistogramActionPerformed
// TODO add your handling code here:
    
    GaborFilterTest gbtobj=new GaborFilterTest();
    
    try{
        gbtobj.testImage();
    histgui hobj=new histgui();
     System.out.println("see histogram button  SeeHistogrampath== "+ SeeHistogrampath);
    hobj.view(SeeHistogrampath);
    }
    catch(IOException ioe)
    {
        System.out.println("ioe hua inside seehistogrambutton "+ioe);
    }
}//GEN-LAST:event_SeeHistogramActionPerformed

int [] getbest()
{
    
                int [][] weight=new int[300][3];
                int [][] jweight=new int[300][3];
                
                for(int i=0;i<300;i++)
                {
                    weight[i][0]=-1;
                    jweight[i][0]=-1;
                }
                
                for(int i=0;i<300;i++)
                {
                    jweight[i][0]=-1;
                    weight[i][0]=-1;
                    weight[i][1]=0;
                    weight[i][2]=3333;
                    for(int j=0;j<300;j++)
                    {
                        if(orderreturned[i]==waveletorderreturned[j] && weight[i][1]!=orderreturned[i])
                        {
                            weight[i][0]=i+j; // for getting rank in list
                            jweight[j][0]=i+j; // for wavelet also results rank storing
                            weight[i][1]=i;   // for setting the visited flag
                            jweight[j][1]=j;   
                            weight[i][2]=orderreturned[i];
                            jweight[j][2]=waveletorderreturned[j];
                        }                        
                    }
                    if(weight[i][0]==-1)
                    {
                        weight[i][0]=i+300;      // weight or say rank in list
                        weight[i][1]=i;         // index of image    
                        weight[i][2]=orderreturned[i];   // index of image
//                        weight[i][2]=orderreturned[i];
//                        weight[i+1][0]=i+10;
//                        weight[i+1][2]=waveletorderreturned[i];
                        //i++;
                    }
                }
                
                
                for(int j=0;j<300;j++)
                    {
                    if(jweight[j][0]==-1)
                    {
                     jweight[j][0]=j+300;   
                     jweight[j][1]=j;
                     jweight[j][2]=waveletorderreturned[j];
                    }
                    }
               
                int p=0;
                int [] counter=new int[300];
               int min=9999;
               int k=0;
               
               boolean bool=true;
               
               while(k<11)
               {
                   counter[k]=0;
               for(int i=0;i<300;i++)
               {
                   for(int j=0;j<300;j++)
                   {
                       if(weight[i][0]<min )
                       {
                           min=weight[i][0];
                           p=weight[i][2];
                           if(jweight[i][0]<min)
                           {
                               min=jweight[i][0];
                               p=jweight[i][2];                           
                           }
                       }
                   }
                   if(min!=9999)
                   {
                       counter[k]=p;                   
                        k++;
                   }
                   min=9999;
               }
               }
               
                return counter;
}

int [] getintsc()
{
    int [] counter=new int[400];
    int p=0;
    for(int i=0;i<400;i++)
    {
        for(int j=0;j<400;j++)
        {
            if(waveletorderreturned[i]==orderreturned[j])
            {
                counter[p]=waveletorderreturned[i];
                //System.out.println(" counter "+p+"  = "+counter[p]);
                p++;
                break;
            }
        }
    }
    return counter;
}

private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
    
    try {
            if(WaveletsRadioButton.isSelected()==true&&ColorRadioButton.isSelected()==true)
            {
                long starttime=System.currentTimeMillis();    
                HistogramIndexer hiobj=new HistogramIndexer (queryimagepath);
                hiobj.setsize();
                orderreturned=hiobj.indexer(2);
            
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/indexingpath.txt"));
                ObjectInputStream ois=new ObjectInputStream(fis);              
                indexingpath=(String)ois.readObject();  
                ois.close();
            
                waveletprocessing wpobj=new waveletprocessing();
                waveletorderreturned=wpobj.comparewavelets(queryimagepath);
            
                long endtime=System.currentTimeMillis();
                long time=endtime-starttime;
                System.out.println(" sequential search took time = "+time);
                
               // int [] list=getbest();
                //int [] ilist=getintsc();
                int [] blist=getbest();
            ListViewer lvobj=new ListViewer();
            
            //lvobj.viewme(indexingpath, ilist , "intersection");
            lvobj.viewme(indexingpath, blist, " best");
               
            }
            
            else if(ColorRadioButton.isSelected()==true&& WaveletsRadioButton.isSelected()==false)
            {
                long starttime=System.currentTimeMillis();    
                // TODO add your handling code here:
             //System.out.println("inside searchbutton queryimage path value ="+queryimagepath);
                HistogramIndexer hiobj=new HistogramIndexer (queryimagepath);
                hiobj.setsize();
                orderreturned=hiobj.indexer(2);
                
                
                long endtime=System.currentTimeMillis();
    long time=endtime-starttime;
    System.out.println(" sequential search took time = "+time);
            
               // System.out.println("order returned =");
//                for(int i=0;i<top;i++)
//                    System.out.println(orderreturned[i]);
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/indexingpath.txt"));

            ObjectInputStream ois=new ObjectInputStream(fis);
              
            indexingpath=(String)ois.readObject();
            
            //  System.out.println("inside search button action:: indexing path= "+indexingpath);
              
            ois.close();
            
     //       waveletprocessing wpobj=new waveletprocessing();
       //     waveletorderreturned=wpobj.comparewavelets(queryimagepath);
            
            ListViewer lvobj=new ListViewer();
            
            lvobj.viewme(indexingpath, orderreturned," color");
            
           // lvobj.viewme(indexingpath, waveletorderreturned);
            }
            
            else if(WaveletsRadioButton.isSelected()==true && ColorRadioButton.isSelected()==false)
            {
                long starttime=System.currentTimeMillis();    
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/waveletindexingpath.txt"));
                ObjectInputStream ois=new ObjectInputStream(fis);              
                indexingpath=(String)ois.readObject();  
                ois.close();
            
                waveletprocessing wpobj=new waveletprocessing();
                waveletorderreturned=wpobj.comparewavelets(queryimagepath);
            long endtime=System.currentTimeMillis();
    long time=endtime-starttime;
    System.out.println(" sequential search took time = "+time);
            ListViewer lvobj=new ListViewer();
            
            lvobj.viewme(indexingpath, waveletorderreturned," wavelet");
               
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        }
    catch(FileNotFoundException fnf)
    {
        System.out.append("file is not found in search button pressing"+fnf);
    }
    catch(IOException ioe)
    {
        System.out.append("IOException ho gaya search button pressing"+ioe);
    }
    
    
}//GEN-LAST:event_SearchButtonActionPerformed

private void BrowseQuerybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseQuerybuttonActionPerformed
// TODO add your handling code here:
    JFileChooser BrowseQueryButtonpath=new JFileChooser();
    BrowseQueryButtonpath.setFileSelectionMode(JFileChooser.FILES_ONLY);
    BrowseQueryButtonpath.setDialogTitle("Select an image for query");
    BrowseQueryButtonpath.showDialog(this, "Open it");
    File queryfile=BrowseQueryButtonpath.getSelectedFile();
    System.out.print(queryfile.getAbsolutePath());
    if(queryfile.isFile())
    {
        String queryfilepath=queryfile.getAbsolutePath();
        QuerypathTextLabel.setText(queryfilepath);   
        queryimagepath=queryfilepath;
            try {
                ImageIcon imgicon=new ImageIcon(ImageIO.read(queryfile));
                queryimagelabel.setIcon(imgicon);
            } catch (IOException ex) {
                Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
    }
    else
        JOptionPane.showMessageDialog(null, "Select file only", "An Oops moment", WIDTH);
    
}//GEN-LAST:event_BrowseQuerybuttonActionPerformed

private void WaveletsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WaveletsRadioButtonActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_WaveletsRadioButtonActionPerformed

private void ShapequerypathTextLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShapequerypathTextLabelActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_ShapequerypathTextLabelActionPerformed

private void BrowseShapeQuerybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseShapeQuerybuttonActionPerformed
// TODO add your handling code here:
    JFileChooser BrowseShapeQueryButtonpath=new JFileChooser();
    BrowseShapeQueryButtonpath.setFileSelectionMode(JFileChooser.FILES_ONLY);
    BrowseShapeQueryButtonpath.setDialogTitle("Select an image for viewing its shape ");
    BrowseShapeQueryButtonpath.showDialog(this, "Open it");
    File shapefile=BrowseShapeQueryButtonpath.getSelectedFile();
    System.out.println("show shape file path == "+shapefile.getAbsolutePath());
    if(shapefile.isFile())
    {
        String shapefilepath=shapefile.getAbsolutePath();
        ShapequerypathTextLabel.setText(shapefilepath);   
        ShowShapepath=shapefilepath;
        System.out.println("shape viewing file path  Show shapepath== "+ ShowShapepath);
    }
    else
        JOptionPane.showMessageDialog(null, "Select file only", "An Oops moment inside view histogram button", WIDTH);
    
}//GEN-LAST:event_BrowseShapeQuerybuttonActionPerformed

private void ShowShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowShapeActionPerformed
// TODO add your handling code here:
        try{
    shapegui sobj=new shapegui();
     System.out.println("show shape button  show shape path== "+ ShowShapepath);
    sobj.view(ShowShapepath);
    }
    catch(IOException ioe)
    {
        System.out.println("ioe hua inside seehistogrambutton "+ioe);
    }
}//GEN-LAST:event_ShowShapeActionPerformed

private void EdgesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgesButtonActionPerformed
// TODO add your handling code here:
    String shapepath;
    shapepath=ShapequerypathTextLabel.getText();   
    
    cannyedgedetector ced=new cannyedgedetector();
    try{       
         ced.viewedges(shapepath);         
       }
    catch (IOException ioe)
    {
        System.out.println("IOException thrown in canny edge stector edge ciewing"+ioe);
    }
}//GEN-LAST:event_EdgesButtonActionPerformed

private void ClusteringpathTextLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClusteringpathTextLabelActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_ClusteringpathTextLabelActionPerformed

private void BrowseClusterbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseClusterbuttonActionPerformed
// TODO add your handling code here:
    
    JFileChooser BrowseClusteringButtonpath=new JFileChooser();
    BrowseClusteringButtonpath.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    BrowseClusteringButtonpath.setDialogTitle("Select Directory for Clustering");
    BrowseClusteringButtonpath.showDialog(this, "Open it");
    File Clusteringfolder=BrowseClusteringButtonpath.getSelectedFile();
    System.out.print(Clusteringfolder.getAbsolutePath());
    if(Clusteringfolder.isDirectory())
    {
        String Clusteringfolderpath=Clusteringfolder.getAbsolutePath();
        ClusteringpathTextLabel.setText(Clusteringfolderpath);   
        Clusteringpath=Clusteringfolderpath;
          System.out.println("indexingpath value inside browse database button  ="+Clusteringpath);
    }
    else
        JOptionPane.showMessageDialog(null, "Select directory only", "An Oops moment in browsedb button", WIDTH);
}//GEN-LAST:event_BrowseClusterbuttonActionPerformed

private void SupervisedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupervisedButtonActionPerformed
// TODO add your handling code here:
    Supervised supobj=new Supervised();
        try {
             clusterno=Integer.parseInt(Clusternumber.getText());
            double[][] distancemat=supobj.group();
            if(clusterno==200)
            {
                JOptionPane.showMessageDialog(this, "Enter which cluster u want to see the contents ");
            }
            else
            {
                System.out.println("cluster no ="+clusterno);
                int count=0;
                int matsize=distancemat.length;
                int k=distancemat[0].length;
                int[]list=new int[matsize];
                ListViewer lvobj=new ListViewer();
                for(int i=0;i<matsize;i++)
                {
                    if(distancemat[i][k-1]==clusterno)
                    {
                        list[count]=i;
                        count++;
                        System.out.println(i);
                    }
                }
                lvobj.viewme(Clusteringpath, list,"clustering");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}//GEN-LAST:event_SupervisedButtonActionPerformed

private void UnsupervisedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnsupervisedButtonActionPerformed
// TODO add your handling code here:
    kmeans kmnobj=new kmeans();
    
        try {
             clusterno=Integer.parseInt(Clusternumber.getText());
            double[][] distancemat=kmnobj.group();
            if(clusterno==200)
            {
                JOptionPane.showMessageDialog(this, "Enter which cluster u want to see the contents ");
            }
            else
            {
                System.out.println("cluster no ="+clusterno);
                int count=0;
                int matsize=distancemat.length;                
                int[]list=new int[matsize];
                ListViewer lvobj=new ListViewer();
                for(int i=0;i<matsize;i++)
                {
                    if(distancemat[i][0]==clusterno)
                    {
                        list[count]=(int)distancemat[i][1];
                        count++;
                        System.out.println("i= "+i+ "  and clusterno = "+clusterno+ " and list[i] = "+list[count-1]);
                    }
                }
                lvobj.viewme(Clusteringpath, list," unsupervised clustering");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}//GEN-LAST:event_UnsupervisedButtonActionPerformed

private void ClusternumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClusternumberActionPerformed
// TODO add your handling code here:
   // clusterno=Integer.getInteger(Clusternumber.getSelectedText());
    System.out.println(" cluster no ="+clusterno);
}//GEN-LAST:event_ClusternumberActionPerformed

private void ParallelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParallelButtonActionPerformed
// TODO add your handling code here:
     
         try {            
             
            if(WaveletsRadioButton.isSelected()==true&&ColorRadioButton.isSelected()==true)
            {
                long starttime=System.currentTimeMillis();
                
                parallelHistogramIndexer hiobj=new parallelHistogramIndexer (queryimagepath);
                int x=hiobj.getsize();
                hiobj.setrgbvalues();
                
                 parallelHistogramIndexer hiobj1=new parallelHistogramIndexer(0,x/2);                 
                 hiobj1.start();                 
            //Thread t=new Thread();
            
            
                 parallelHistogramIndexer hiobj2=new parallelHistogramIndexer(x/2,x);
                //Thread t1=new Thread();
                 hiobj2.start();
                 
                 while(hiobj1.isAlive()==true || hiobj2.isAlive()==true);
                 
                         
                  if(hiobj1.isAlive()==false && hiobj2.isAlive()==false)
                 {
                     orderreturned=hiobj.indexer();
                 }         
            
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/indexingpath.txt"));
                ObjectInputStream ois=new ObjectInputStream(fis);              
                indexingpath=(String)ois.readObject();  
                ois.close();
            
                parallelwaveletprocessing pwpobj=new parallelwaveletprocessing();
                waveletorderreturned=pwpobj.comparewavelets(queryimagepath);
            
                long endtime=System.currentTimeMillis();
                long time=endtime-starttime;
                System.out.println(" time taken in parallel = "+time);
                
              //  int [] list=getintsc();
                int [] blist=getbest();
            ListViewer lvobj=new ListViewer();
            
            //lvobj.viewme(indexingpath, list," Wavelets and Color Intersection indexing");
            lvobj.viewme(indexingpath, blist," Wavelets and Color getbest indexing");
               
            }
            
            
            
            else if(ColorRadioButton.isSelected()==true&& WaveletsRadioButton.isSelected()==false)
            {
                // TODO add your handling code here:
                
                long starttime=System.currentTimeMillis();
                
                //System.out.println("inside searchbutton queryimage path value ="+queryimagepath);
                parallelHistogramIndexer hiobj=new parallelHistogramIndexer (queryimagepath);
                int x=hiobj.getsize();
                hiobj.setrgbvalues();
                
                 parallelHistogramIndexer hiobj1=new parallelHistogramIndexer(0,x/2);                 
                 hiobj1.start();                 
            //Thread t=new Thread();
            
            
                 parallelHistogramIndexer hiobj2=new parallelHistogramIndexer(x/2,x);
                //Thread t1=new Thread();
                 hiobj2.start();
                 
                 while(hiobj1.isAlive()==true || hiobj2.isAlive()==true);
                 
                         
                  if(hiobj1.isAlive()==false && hiobj2.isAlive()==false)
                 {
                     orderreturned=hiobj.indexer();
                             
                long endtime=System.currentTimeMillis();
                long time=endtime-starttime;
                System.out.println(" time taken in parallel = "+time);
                
//                System.out.println("order returned =");
//                for(int i=0;i<top;i++)
//                    System.out.println(orderreturned[i]);
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/indexingpath.txt"));

            ObjectInputStream ois=new ObjectInputStream(fis);
              
            indexingpath=(String)ois.readObject();
            
             // System.out.println("inside search button action:: indexing path= "+indexingpath);
              
            ois.close();
            
     //       waveletprocessing wpobj=new waveletprocessing();
       //     waveletorderreturned=wpobj.comparewavelets(queryimagepath);
            
            ListViewer lvobj=new ListViewer();
            
            lvobj.viewme(indexingpath, orderreturned,"color");
            
           // lvobj.viewme(indexingpath, waveletorderreturned);
            }
            }
            
            
            else if(WaveletsRadioButton.isSelected()==true && ColorRadioButton.isSelected()==false)
            {
                long starttime=System.currentTimeMillis();
                
                FileInputStream fis=new FileInputStream(new File("C:/Users/asheesh/Documents/NetBeansProjects/Talaash/waveletindexingpath.txt"));
                ObjectInputStream ois=new ObjectInputStream(fis);              
                indexingpath=(String)ois.readObject();  
                ois.close();
            
               
                parallelwaveletprocessing pwpobj=new parallelwaveletprocessing();
                waveletorderreturned=pwpobj.comparewavelets(queryimagepath);
                
                long endtime=System.currentTimeMillis();
                long time=endtime-starttime;
                System.out.println(" time taken in parallel = "+time);
                
            ListViewer lvobj=new ListViewer();
            
            lvobj.viewme(indexingpath, waveletorderreturned,"wavelet");
               
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Tasveer_Talaash.class.getName()).log(Level.SEVERE, null, ex);
        }
    catch(FileNotFoundException fnf)
    {
        System.out.append("file is not found in search button pressing"+fnf);
    }
    catch(IOException ioe)
    {
        System.out.append("IOException ho gaya search button pressing"+ioe);
    }
         
}//GEN-LAST:event_ParallelButtonActionPerformed

private void Combined_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combined_ButtonActionPerformed
// TODO add your handling code here:
    
    //do histogram search
    
    //feed the histogram search into wavelet and search in them 
}//GEN-LAST:event_Combined_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tasveer_Talaash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tasveer_Talaash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tasveer_Talaash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tasveer_Talaash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Tasveer_Talaash().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AboutTextArea;
    private javax.swing.JButton BrowseClusterbutton;
    private javax.swing.JButton BrowseDatabaseButton;
    private javax.swing.JButton BrowseHistogramQuerybutton;
    private javax.swing.JButton BrowseQuerybutton;
    private javax.swing.JButton BrowseShapeQuerybutton;
    private javax.swing.JTextField ClusteringpathTextLabel;
    private javax.swing.JTextField Clusternumber;
    private javax.swing.JRadioButton ColorRadioButton;
    private javax.swing.JButton Combined_Button;
    private javax.swing.JTextField DatabasePathTextLabel;
    private javax.swing.JButton EdgesButton;
    private javax.swing.JLabel HistogramLabel;
    private javax.swing.JLabel HistogramLabel1;
    private javax.swing.JPanel HistogramPane;
    private javax.swing.JTextField HistogramquerypathTextLabel;
    private javax.swing.JButton IndexingButton;
    private javax.swing.JButton ParallelButton;
    private javax.swing.JPanel PreprocessPanel1;
    private javax.swing.JProgressBar ProgressBar1;
    private javax.swing.JTextField QuerypathTextLabel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JPanel SearchPanel;
    private javax.swing.JLabel SearchUsingLabel;
    private javax.swing.JButton SeeHistogram;
    private javax.swing.JPanel ShapePane;
    private javax.swing.JPanel ShapePane1;
    private javax.swing.JTextField ShapequerypathTextLabel;
    private javax.swing.JButton ShowShape;
    private javax.swing.JButton SupervisedButton;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton UnsupervisedButton;
    private javax.swing.JRadioButton UsingColorRadioButton;
    private javax.swing.JRadioButton UsingShapeRadioButton;
    private javax.swing.JRadioButton WaveletsRadioButton;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JLabel queryimagelabel;
    // End of variables declaration//GEN-END:variables
}
